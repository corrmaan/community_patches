*** a/frameworks/base/core/java/android/app/admin/DevicePolicyManager.java	2019-10-21 23:53:41.000000000 -0300
--- b/frameworks/base/core/java/android/app/admin/DevicePolicyManager.java	2019-10-21 23:58:40.522897910 -0300
***************
*** 534,540 ****
       *
       * @hide
       */
!     public static final long DEFAULT_STRONG_AUTH_TIMEOUT_MS = 72 * 60 * 60 * 1000; // 72h
  
      /**
       * A {@link android.os.Parcelable} extra of type {@link android.os.PersistableBundle} that
--- 534,540 ----
       *
       * @hide
       */
!     public static final long DEFAULT_STRONG_AUTH_TIMEOUT_MS = 42 * 24 * 60 * 60 * 1000; // 42d
  
      /**
       * A {@link android.os.Parcelable} extra of type {@link android.os.PersistableBundle} that
*** frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStrongAuth.java.orig	2019-10-22 00:01:54.000000000 -0300
--- frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStrongAuth.java	2019-10-22 00:06:03.744198394 -0300
***************
*** 120,137 ****
      private void handleScheduleStrongAuthTimeout(int userId) {
          final DevicePolicyManager dpm =
                  (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
!         long when = SystemClock.elapsedRealtime() + dpm.getRequiredStrongAuthTimeout(null, userId);
!         // cancel current alarm listener for the user (if there was one)
!         StrongAuthTimeoutAlarmListener alarm = mStrongAuthTimeoutAlarmListenerForUser.get(userId);
!         if (alarm != null) {
!             mAlarmManager.cancel(alarm);
!         } else {
!             alarm = new StrongAuthTimeoutAlarmListener(userId);
!             mStrongAuthTimeoutAlarmListenerForUser.put(userId, alarm);
!         }
!         // schedule a new alarm listener for the user
!         mAlarmManager.set(AlarmManager.ELAPSED_REALTIME, when, STRONG_AUTH_TIMEOUT_ALARM_TAG,
!                 alarm, mHandler);
      }
  
      private void notifyStrongAuthTrackers(int strongAuthReason, int userId) {
--- 120,126 ----
      private void handleScheduleStrongAuthTimeout(int userId) {
          final DevicePolicyManager dpm =
                  (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
!         Slog.d(TAG, "getRequiredStrongAuthTimeout: " + dpm.getRequiredStrongAuthTimeout(null, userId));
      }
  
      private void notifyStrongAuthTrackers(int strongAuthReason, int userId) {
